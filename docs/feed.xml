<feed xmlns="http://www.w3.org/2005/Atom"> <id>http://www.oscarjiang.site/</id><title>姜鹏的博客</title><subtitle>分享金数据、浩客的故事，创业、管理、技术</subtitle> <updated>2023-01-30T08:55:01+08:00</updated> <author> <name>Oscar</name> <uri>http://www.oscarjiang.site/</uri> </author><link rel="self" type="application/atom+xml" href="http://www.oscarjiang.site/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="http://www.oscarjiang.site/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Oscar </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>重视贡献，为成果而工作</title><link href="http://www.oscarjiang.site/posts/focus-on-contribution.html/" rel="alternate" type="text/html" title="重视贡献，为成果而工作" /><published>2023-01-29T00:00:00+08:00</published> <updated>2023-01-29T23:37:28+08:00</updated> <id>http://www.oscarjiang.site/posts/focus-on-contribution.html/</id> <content src="http://www.oscarjiang.site/posts/focus-on-contribution.html/" /> <author> <name>Oscar</name> </author> <category term="管理" /> <summary> 有效的管理者重视对外界的贡献。他们并非为工作而工作，而是为成果而工作。 提出“我能做出什么贡献”的问题，是为了挖掘工作中尚未发挥的潜力。事实上许多工作看起来成绩辉煌，但是与潜在的贡献比起来，实在是微不足道。 重视贡献，才能使管理者的注意力不为其本身的专长所限，不为其本身的技术所限，不为其本身所属的部门所限，才能看到整体的绩效，同时也才能使他更加重视外部世界。只有外部世界才是产生成果的地方。 —— 彼得·德鲁克 《卓有成效的管理者》 成果带来价值 考虑如下场景： 产品经理组织一个showcase，向市场、销售、客服等业务部门介绍准备上线的功能。大家都很兴奋，针对功能的细节展开激烈的讨论。接下来他综合大家的反馈，进行优化调整，并最终部署上线。 这是日常迭代开发中一个非常普通的环节，通过内部演示，一方面周知不同团队新的功能，一方面收集更多的反馈以避免大面积... </summary> </entry> <entry><title>为什么Turbolinks发送了两次请求</title><link href="http://www.oscarjiang.site/posts/turbolinks-request-twice.html/" rel="alternate" type="text/html" title="为什么Turbolinks发送了两次请求" /><published>2015-01-22T00:00:00+08:00</published> <updated>2023-01-29T23:37:28+08:00</updated> <id>http://www.oscarjiang.site/posts/turbolinks-request-twice.html/</id> <content src="http://www.oscarjiang.site/posts/turbolinks-request-twice.html/" /> <author> <name>Oscar</name> </author> <category term="技术" /> <summary> 前面有一篇文章介绍过使用Turbolinks遇到的一个问题，最近又发现了另一个问题。 开发时，tail后台的log会发现某些情况下，同一个请求会触发两次，不过因为都是get请求，而且同一个地址请求后的响应式相同的，所以前台不能完全察觉到。不够下面的场景跟预期就不一致了。 假设需要一个功能可以在后台管理页面禁止用户账户，被禁止的账户在随后的所有访问当会重定向到禁止页面。 从实现上来讲，当判断出用户的禁用状态后，就会清除他的登录session，然后重定向到禁止页面。但是现象是用户会直接跳转到登录页面，当重新登陆后，则看到禁止页。查看后台就发现同一个地址请求了两次，第一次清除了session，第二次再访问因为没有session就转向到登陆页面了。 当然这种问题看看源码就清楚了，从Turbolinks的代码可以看出，在三种情况下，Turbolinks会尝试第二次请求同一个url。 ... </summary> </entry> <entry><title>Elasticsearch--更新策略</title><link href="http://www.oscarjiang.site/posts/elasticsearch-update-strategy.html/" rel="alternate" type="text/html" title="Elasticsearch--更新策略" /><published>2014-11-25T00:00:00+08:00</published> <updated>2023-01-29T23:37:28+08:00</updated> <id>http://www.oscarjiang.site/posts/elasticsearch-update-strategy.html/</id> <content src="http://www.oscarjiang.site/posts/elasticsearch-update-strategy.html/" /> <author> <name>Oscar</name> </author> <category term="技术" /> <summary> 前一篇文章介绍了如何在Elasticsearch上做动态映射，这篇文章会介绍下如何更有效的做ES的数据更新。 更新频率 如果把ES看做另一个数据库，那么它总是会比系统原有的数据库滞后，因为数据会先存入原有数据库，再同步到ES。那么滞后的时间就是一个敏感的参数。根据业务的不同，差别很大。我了解到有的系统可以接受10分钟以上的延迟，不过我们作为一个数据平台，用户提交或修改数据后，是希望能立刻查询到修改的结果的，所以理论上是越短越好，但频繁的更新会给ES服务器带来很大的开销。 异步更新 更新可以采用同步和异步两种方式。 同步： 使用elasticsearch-rails这个gem中的Automatic-Callback ，在inlcudeElasticsearch::Model::Callbacks后，实际上就是在每一次数据增删改后使用callback来往ES发送请求... </summary> </entry> <entry><title>Elasticsearch--动态类型字段的mapping</title><link href="http://www.oscarjiang.site/posts/elasticsearch-mapping.html/" rel="alternate" type="text/html" title="Elasticsearch--动态类型字段的mapping" /><published>2014-11-24T00:00:00+08:00</published> <updated>2023-01-29T23:37:28+08:00</updated> <id>http://www.oscarjiang.site/posts/elasticsearch-mapping.html/</id> <content src="http://www.oscarjiang.site/posts/elasticsearch-mapping.html/" /> <author> <name>Oscar</name> </author> <category term="技术" /> <summary> ElasticSearch是一个基于Lucene构建的搜索引擎，通过RESTful的api可以进行数据的更新与搜索。目前github就是用的ES。 通常来讲，如果是要进行精确的查询，可以直接针对数据库进行，合理的构建index，可以在数据库层面进行快速准确查询。然后在某些场景下，当数据集合的列无法确定时，很难加index，这会导致在数据量增大时性能严重下降。例如当前项目是一个在线表单，采用Mongodb作为数据库。当对表单和数据建模时就存在这样的问题，数据存储的每一列数据是不固定的，依赖于表单中该列字段类型的定义。这样就无法对数据中的列构建index。当对这一列进行排序，过滤时，不得不遍历当前表单下的所有数据。 ES会对所有的字段构建自己的index和存储，这样不仅分散了数据库的访问压力，也避免了数据库缺失index的问题。这篇文章不是介绍如何从零开始使用ES，网上有很多的入门教... </summary> </entry> <entry><title>Rails CSRF token 探秘</title><link href="http://www.oscarjiang.site/posts/secret-of-rails-csrf-token.html/" rel="alternate" type="text/html" title="Rails CSRF token 探秘" /><published>2014-09-26T00:00:00+08:00</published> <updated>2023-01-29T23:37:28+08:00</updated> <id>http://www.oscarjiang.site/posts/secret-of-rails-csrf-token.html/</id> <content src="http://www.oscarjiang.site/posts/secret-of-rails-csrf-token.html/" /> <author> <name>Oscar</name> </author> <category term="技术" /> <summary> CSRF(Cross-Site Request Forgery)是一种常见的攻击手段，Rails中下面的代码帮助我们的应用来阻止CSRF攻击。 class ApplicationController &amp;lt; ActionController::Base # Prevent CSRF attacks by raising an exception. # For APIs, you may want to use :null_session instead. protect_from_forgery with: :exception end 这段代码是Rails4自动生成的，这里使用了with: :exception设置了对在handle_unverified_request使用的策略是抛出异常ActionController::InvalidAuthenticityT... </summary> </entry> </feed>
